#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# ident	"@(#)fs-root	1.55	08/03/04 SMI"
#
# Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T.
# All rights reserved.
#

# Changed by Thomas Brandstetter for PulsarOS
# 0.1 - removed sparc code

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

libc_mount() {
	#
	# If there is an optimized libc available in /usr that fits this
	# processor, mount it on top of the base libc.
	#
	MOE=`/usr/bin/moe -32 '/usr/lib/libc/$HWCAP'`
	if [ -n "$MOE" ]; then
		/usr/sbin/mount | egrep -s "^/lib/libc.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $MOE /lib/libc.so.1
		fi
	fi
}

. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

# must be done to fix the devices
/sbin/mount -o remount,rw / || exit $SMF_EXIT_ERR_FATAL
/sbin/devfsadm -l /lib/devfsadm/linkmod

#
# Most of the operations in this script are only necessary in the global
# zone but due to the way initialization scripts like this are packaged,
# it needs to currently exist for all zones.
#
if smf_is_nonglobalzone; then
	libc_mount
	exit $SMF_EXIT_OK
fi


#
# Root is already mounted (by the kernel), but still needs to be
# checked, possibly remounted and entered into mnttab.  First
# mount /usr if it is a separate file system.  If the file system
# type is something other than zfs, mount it read-only.  This must
# be done first to allow utilities such as fsck and setmnt to
# reside on /usr minimizing the space required by the root file
# system.
#
readvfstab "/usr" < $vfstab
if [ -n "$mountp" ]; then
	if [ "x$mntopts" = x- ]; then
		mntopts='ro,largefiles'
	else
		checkopt largefiles $mntopts
		if [ "x$option" != xlargefiles ]; then
			mntopts="largefiles,$mntopts"
		fi

		checkopt ro $mntopts
		if [ "x$option" != xro ]; then
			mntopts="ro,$mntopts"
		fi

		#
		# Requesting logging on a read-only mount
		# causes errors to be displayed, so remove
		# "logging" from the list of options for now.
		# The read-write mount performed later will
		# specify the logging option if appropriate.
		#

		checkopt logging $mntopts
		if [ "x$option" = xlogging ]; then
			mntopts="$otherops"
		fi
	fi

	mountfs -O /usr $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
fi


#
# Also mount /boot now so that things like keymap.sh can access
# boot properties through eeprom.  Readonly isn't required because
# /boot (and other pcfs filesystems) aren't fsck'ed at boot yet.
# Also, we don't account for caching /boot as it must be on a local
# disk.  So what's in vfstab is fine as it stands; just look to see
# if it's there and avoid the mount if not.
#
readvfstab "/boot" < $vfstab

if [ -n "$mountp" ]; then
	mountfs - /boot $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
fi

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

libc_mount

# Feature ID #33: Remove unnessesary svc-repository backups
if [ -f /etc/svc/repository-boot* ]; then
	rm /etc/svc/repository-boot*
fi

exit $SMF_EXIT_OK