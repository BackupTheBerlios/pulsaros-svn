#!/usr/bin/ksh93
# Copyright 2009 Thomas Brandstetter. All rights reserved.
# Description:	plugin - manage plugins for pulsaros
# Version:      0.4
#=========================================================

# Variables
WORKDIR=/pulsarroot
APPDIR=/pulsarroot/plugins
MIRROR="http://pulsaros.digitalplayground.at/plugins"
SYNTAX="plugin list | install | deinstall 'pluginname'"
WGET_OPTIONS="--directory-prefix=$WORKDIR -nc -q"


# Functions
print_syntax()
{
	printf "argument expected: ${SYNTAX}\n\n"
	exit 1
}

cleanup()
{
	[ -f $WORKDIR/plugin.list ] && rm $WORKDIR/plugin.list
}

get_plugin()
{
	wget $WGET_OPTIONS ${MIRROR}/plugin.list
	if [ ! -f plugin.list ]; then
		printf "\nError retrieving Plugin list - please try it again!\n\n"
		[ -f HTTP_NOT_FOUND.html.var ] && rm HTTP_NOT_FOUND.html.var && exit 1
	fi
	if [ `cat plugin.list|grep -wc ${1}` -lt 1 ]; then
		printf "\nPlugin name not found!\n\n"
		cleanup
		exit 1		
	fi
}

check_plugin()
{
	dependency=0
	get_plugin $1
	case $2 in
		install)
			[ -d $APPDIR/${1} ] && printf "\nPlugin already installed!\n" && exit 1
			debs=`grep "^${1}" plugin.list|awk -F'|' '{print $3}'`
			for i in `echo $debs |awk -F',' '{ for (i = NF; i > 0; --i) print $i }'`; do
				if [ ! -d $APPDIR/${i} ]; then
					printf "\nDependency check failed - plugin ${i} must be installed first!\n"
					dependency=1
				fi
			done 
			[ $dependency -eq 1 ] && cleanup && exit 1
		;;
		deinstall)
			[ ! -d $APPDIR/${1} ] && printf "\nPlugin not installed!\n" && exit 1
			debs=`grep -v "^${1}" plugin.list|grep "${1}" | awk -F'|' '{print $1}'`
			for i in `echo $debs`; do
				# print an error message, if plugin has a dependency to another one
				if [ -d $APPDIR/${i} ]; then
					printf "\nDependency check failed - ${i} must be deinstalled first!\n"
					dependency=1
				fi
			done 
			[ $dependency -eq 1 ] && cleanup && exit 1
		;;
		*)
			printf "API error - contact developer!"
			cleanup
		;;
	esac
}

list_plugins()
{
	# get plugin.list file
	wget $WGET_OPTIONS ${MIRROR}/plugin.list
	# create plugin list
	printf "\n\n"
	printf "Plugin Name          Actual version\t\tInstalled Version\tStatus\n"
	printf "=================================================================================\n"
	for i in `cat plugin.list`; do
		plugin_name=`echo $i | awk  -F'|' '{print $1}'`
		plugin_version=`echo $i | awk -F'|' '{print $2}'`
		if [ ! -d $APPDIR/${plugin_name} ]; then
			plugin_installed="-"
			plugin_status="-"
		else
			plugin_installed=`cat $APPDIR/${plugin_name}/.plugin_version`
			plugin_status=`cat $APPDIR/${plugin_name}/.plugin_status`
		fi
		printf "${plugin_name}\t\t\t${plugin_version}\t\t\t${plugin_installed}\t\t\t${plugin_status}\n"
	done
	printf "\n\n"
}

install_plugin()
{
	check_plugin $1 "install"
	# check if plugin is already installed
	if [ -d $APPDIR/plugins/${1} ]; then
		printf "Plugin is already installed. Check for updates with the 'update' parameter.\n\n"
		exit 1
	else
		# download the plugin from the internet and install it
		printf "\nInstalling ${1} plugin..."
		wget $WGET_OPTIONS "${MIRROR}/${1}.tar.bz2"
		if [ $? -eq 0 ]; then
			bzip2 -d ${1}.tar.bz2 && tar -xf ${1}.tar
			mv ${1} ${APPDIR}
			rm ${1}.tar
			${APPDIR}/${1}/scripts/main.sh install
			# check the installation status and update .plugin_status file
			if [ $? != 0 ]; then
				printf "Warning plugin installation failed - please remove the plugin with 'plugin deinstall' and try it again!\n\n"
				cleanup
				exit 1
			else 
				echo "installed" > ${APPDIR}/${1}/.plugin_status
				svc=`grep "^$1" plugin.list`
				[ "`echo $svc|awk -F'|' '{print $4}'`" = "A" ] &&  activate_plugin ${1}
				printf "\nPlugin successfully installed and activated!\n\n"
			fi
		else
			printf "Error downloading the plugin - please try it again!\n\n"
			cleanup
			exit 1
		fi
	fi
}

update_plugin()
{
	printf "Not implemented yet!"
}

activate_plugin()
{
	printf "Activating plugin ${1} ..."
	svcadm enable ${1}
	sleep 5
	if [ `svcs ${1}|tail -1|awk '{print $1}'` != "online" ]; then
		printf "Warning: Plugin activation failed - please take a look in /var/svc/log/application-${1}:default.log, correct the error and try it again!\n\n"
		exit 1
	else
		# make changes permanent
		changeconfig
		printf "\nPlugin successfully activated!\n\n"
	fi
}

deactivate_plugin()
{
	printf "Deactivating plugin ${1} ..."
	svcadm disable ${1}
	sleep 5
	if [ $? -eq 0 ]; then
		printf "\nPlugin successfully deactivated!\n\n"
	else
		printf "Warning: Plugin deactivation failed - please take a look in /var/svc/log/application-${1}:default.log, correct the error and try it again!\n\n"
		exit 1
	fi
}

deinstall_plugin()
{
	check_plugin $1 "deinstall"
	svc=`grep "^$1" plugin.list`
	[ "`echo $svc|awk -F'|' '{print $4}'`" = "A" ] && deactivate_plugin ${1}
	printf "Deinstalling plugin..."
	${APPDIR}/${1}/scripts/main.sh deinstall
	if [ $? != 0 ]; then
		printf "Warning plugin deinstallation failed - please try it again!\n\n"
		cleanup
		exit 1
	else 
		changeconfig
		printf "\nPlugin successfully deactivated and deinstalled!\n\n"
	fi
}

# Main program starts here
cd $WORKDIR

# Check syntax
[ $# = 0 ] && print_syntax

# Available parameters
case $1 in
	list)
		list_plugins
		cleanup
	;;
	install)
		if [ $# != 2 ]; then
			print_syntax
		fi
		install_plugin $2
		cleanup
	;;
	update)
		update_plugin $2
		cleanup
	;;
	deinstall)
		deinstall_plugin $2
		cleanup
	;;
	*)
		print_syntax
	;;
esac

exit 0
