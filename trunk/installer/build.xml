<project name="igologic" default="test" basedir=".">
    <description>
        Build file for embedded Solaris
    </description>
  <!-- set global properties for this build -->
  <property name="minirootdir" location="${basedir}/miniroot"/>
  <property name="miniroot-image" value="opensolaris"/>
  <property name="solaris-media-root" value="/iso"/>
  <property name="solaris-media-location" value="${solaris-media-root}/Solaris_11/Product"/>
  <property name="projname" value="coreinstaller"/>
  <property name="failonerror" value="true"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

  <target name="set-solaris-media-present" depends="init"
        description="set solaris-media-present property if it exists" >
    <!-- Check for Solaris install media -->
    <available file="${solaris-media-location}" type="dir"
          property="solaris-media-present"/>
  </target>

  <target name="check-install-media" depends="set-solaris-media-present"
        unless="solaris-media-present"
        description="Quit if Solaris install media is not available" >
       <fail message="Solaris media ${solaris-media-location} not available."/>
  </target>

  <target name="set-miniroot-populated" depends="init"
        description="set miniroot-present property if miniroot is populated" >
    <!-- Check to see if miniroot has contents -->
    <available file="${minirootdir}/kernel" type="dir"
          property="miniroot-populated"/>
  </target>

  <target name="check-miniroot-populated" depends="set-miniroot-populated"
        unless="miniroot-populated"
        description="Quit if miniroot directory has no contents" >
    <fail message="Miniroot directory ${minirootdir} is not populated."/>
  </target>

  <!-- Use unix rm command instead of <delete> task because it fails
       to remove an obscurely named file within the miniroot directory -->
  <target name="delete-miniroot" depends="init"
        description="delete miniroot directory" >
    <exec dir="${basedir}" executable="/usr/bin/rm" failonerror="true">
      <arg line="-rf ${minirootdir}"/>
    </exec>
  </target>

  <target name="clean" depends="init"
        description="clean up" >
    <antcall target="delete-miniroot"> </antcall>
    <delete file="${basedir}/packages.log"/>
    <delete file="${basedir}/boot/${miniroot-image}.gz"/>
  </target>

  <target name="addpkgs" depends="check-install-media,delete-miniroot"
        description="Add selected packages to embedded miniroot" >
    <exec dir="${basedir}/baseline" executable="${basedir}/baseline/addpkgs.sh"
          failonerror="true">
      <arg line="${basedir}/baseline/PACKAGES ${solaris-media-location} ${basedir}"/>
    </exec>
  </target>

  <target name="add-platform-specific"
        depends="check-miniroot-populated,check-install-media"
        description="Add platform specific content" >
     <exec dir="${basedir}/platform" executable="${basedir}/platform/addvel.sh"
          failonerror="true">
      <arg line="${solaris-media-location} ${basedir}"/>
    </exec>
    <exec dir="${basedir}/platform" executable="${basedir}/platform/addconf.sh"
          failonerror="true">
      <arg line="${solaris-media-location} ${basedir}"/>
    </exec>
  </target>

  <target name="setupsmf" depends="check-miniroot-populated"
        description="Setup customized SMF services" >
    <exec dir="${basedir}/smf" executable="${basedir}/smf/setupsmf.sh"
          failonerror="true">
      <arg line="${basedir}/miniroot ${basedir}/smf"/>
    </exec>
  </target>

  <target name="setupnet" depends="check-miniroot-populated"
        description="Fix miniroot image" >
    <exec dir="${basedir}/misc" executable="${basedir}/misc/setupnet.sh"
          failonerror="true">
      <arg line="${basedir}/miniroot"/>
    </exec>
  </target>

  <target name="fiximage" depends="check-miniroot-populated"
        description="Fix miniroot image" >
    <exec dir="${basedir}/misc" executable="${basedir}/misc/fiximage.sh"
          failonerror="true">
      <arg line="${basedir}/miniroot"/>
    </exec>
  </target>

  <target name="trim" depends="check-miniroot-populated"
        description="Remove unnecessary miniroot components" >
    <exec dir="${basedir}/misc" executable="${basedir}/misc/trim.sh"
          failonerror="true">
      <arg line="${minirootdir}"/>
    </exec>
  </target>

  <target name="make-boot-archive" depends="check-miniroot-populated"
        description="Create a bootable archive of miniroot" >
    <exec dir="${basedir}/misc"
          executable="${basedir}/misc/bootarchive.sh" failonerror="true">
      <arg line="${basedir} ${minirootdir} ${miniroot-image}"/>
    </exec>
  </target>

  <target name="makeimage" depends="check-install-media"
        description="create miniroot image" >
    <antcall target="delete-miniroot"> </antcall>
    <antcall target="addpkgs"> </antcall>
    <antcall target="add-platform-specific"> </antcall>
    <antcall target="setupsmf"> </antcall> 
    <antcall target="setupnet"> </antcall> 
    <antcall target="fiximage"> </antcall>
    <antcall target="trim"> </antcall>
    <antcall target="make-boot-archive"> </antcall>
  </target>

</project>
